@page "/booking"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using Microsoft.AspNetCore.Components.Authorization
@inject IBookingService BookingService
@inject IFestivalService FestivalService
@inject ITicketService TicketService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3>Book a Festival</h3>

<!-- Main Content -->
<AuthorizeView Roles="User">
    <Authorized Context="authContext">
        <div class="booking-section">
            <h4>Available Festivals</h4>
            @if (festivals.Count == 0)
            {
                <p>No festivals available for booking.</p>
            }
            else
            {
                <ul class="festival-list">
                    @foreach (var festival in festivals)
                    {
                        <li class="festival-item">
                            <strong>@festival.Name</strong> - @festival.Location (@festival.StartDate.ToString("MMM dd, yyyy"))
                            <div>
                                <label for="ticket-select-@festival.Id">Select Ticket Type:</label>
                                <select id="ticket-select-@festival.Id" @onchange="e => OnTicketSelected(festival.Id, e)">
                                    <option value="">-- Select --</option>
                                    @foreach (var ticket in tickets)
                                    {
                                        <option value="@ticket.Id" selected="@(selectedTicketIds.TryGetValue(festival.Id, out var selId) && selId == ticket.Id ? "selected" : null)">@ticket.TicketType (@ticket.Price RON)</option>
                                    }
                                </select>
                                <button class="btn btn-primary btn-sm" @onclick="() => BookFestival(festival.Id)">Book</button>
                            </div>
                        </li>
                    }
                </ul>
            }
        </div>
        <div class="user-bookings-section mt-4">
            <h4>Your Bookings</h4>
            @if (userBookings.Count == 0)
            {
                <p>You have no bookings yet.</p>
            }
            else
            {
                <ul class="booking-list">
                    @foreach (var booking in userBookings)
                    {
                        var festival = festivals.FirstOrDefault(f => f.Id == booking.FestivalId);
                        var ticket = tickets.FirstOrDefault(t => t.Id == booking.TicketId);
                        <li class="booking-item">
                            @if (festival != null)
                            {
                                <div>
                                    <span>@festival.Name</span> - <span>@festival.Location</span> (<span>@festival.StartDate.ToString("MMM dd, yyyy")</span>)
                                    @if (ticket != null)
                                    {
                                        <span> | Type: @ticket.TicketType (@ticket.Price RON)</span>
                                    }
                                </div>
                            }
                            else
                            {
                                <span>Festival ID: @booking.FestivalId</span>
                                @if (ticket != null)
                                {
                                    <span> | Type: @ticket.TicketType (@ticket.Price RON)</span>
                                }
                            }
                        </li>
                    }
                </ul>
            }
        </div>
        @if (!string.IsNullOrEmpty(message))
        {
            <div class="alert alert-info mt-2">@message</div>
        }
    </Authorized>
    <NotAuthorized>
        <div class="alert alert-warning">
            <strong>NOT AUTHORIZED:</strong> You must be logged in to book a festival.
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<FestivalGetDto> festivals = new();
    private List<BookingGetDto> userBookings = new();
    private List<TicketGetDto> tickets = new();
    private int currentUserId;
    private string message = string.Empty;
    // Track selected ticket type per festival
    private Dictionary<int, int> selectedTicketIds = new(); // festivalId -> ticketId
    
    protected override async Task OnInitializedAsync()
    {
        // Debug authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        // isAuthenticated = user.Identity?.IsAuthenticated ?? false;
        // userIdentityName = user.Identity?.Name;
        // userRoles = user.Claims.Where(c => c.Type == "role" || c.Type.EndsWith("role")).Select(c => c.Value).ToList();
        // totalClaims = user.Claims.Count();
        // foreach (var claim in user.Claims)
        // {
        //     var claimKey = $"{claim.Type}";
        //     var claimValue = claim.Value;
        //     allClaims[claimKey] = claimValue;
        // }
        // Get festivals
        try
        {
            festivals = (await FestivalService.GetAllFestivalsAsync()).ToList();
        }
        catch (Exception) { }
        // Get tickets
        try
        {
            tickets = (await TicketService.GetAllTicketsAsync()).ToList();
        }
        catch (Exception) { }
        // Get user ID from claims
        var userIdClaim = user.Claims.FirstOrDefault(c => c.Type == "sub" || c.Type == "userid" || c.Type.EndsWith("nameidentifier"));
        if (userIdClaim != null && int.TryParse(userIdClaim.Value, out var uid))
        {
            currentUserId = uid;
        }
        else
        {
            currentUserId = 0;
        }
        await LoadUserBookings();
    }

    private async Task BookFestival(int festivalId)
    {
        message = string.Empty;
        if (currentUserId == 0)
        {
            message = "Could not determine your user ID. Please log in again.";
            return;
        }
        // Get selected ticketId for this festival
        if (!selectedTicketIds.TryGetValue(festivalId, out int ticketId))
        {
            message = "Please select a ticket type.";
            return;
        }
        try
        {
            var success = await BookingService.CreateBookingAsync(festivalId, currentUserId, ticketId);
            if (success)
            {
                message = "Booking successful!";
                await LoadUserBookings();
            }
            else
            {
                message = "Booking failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            message = $"Error: {ex.Message}";
        }
    }

    private async Task LoadUserBookings()
    {
        userBookings.Clear();
        if (currentUserId != 0)
        {
            try
            {
                var bookings = await BookingService.GetBookingsByUserIdAsync(currentUserId);
                userBookings = bookings.Select(b => new BookingGetDto
                {
                    FestivalId = b.FestivalId,
                    UserId = b.UserId,
                    TicketId = b.TicketId
                }).ToList();
            }
            catch (Exception) { }
        }
    }

    // Handler for ticket selection change
    private void OnTicketSelected(int festivalId, ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int ticketId))
        {
            selectedTicketIds[festivalId] = ticketId;
        }
    }
}