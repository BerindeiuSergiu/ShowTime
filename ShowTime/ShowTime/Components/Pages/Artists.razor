@page "/artists"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.BussinessLogic.Dtos
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@inject IArtistsService ArtistService
@inject AuthenticationStateProvider AuthenticationStateProvider


@* newArtist!.Name ==> Null forgiving operator nu ma omoara daca e null *@
<div class="artists-container">
    <div class="page-header">
        <h1 class="page-title">Artist Management</h1>
        <p class="page-subtitle">Manage your artists collection</p>
    </div>
    <AuthorizeView Roles="Administrator">
        <Authorized Context="authContext">
            <div class="forms-section">
                <!-- Add Artist Form -->
                <div class="form-card add-form">
                    <div class="form-header">
                        <h2 class="form-title">Add New Artist</h2>
                        <div class="form-icon add-icon">+</div>
                    </div>
                    <EditForm Model="newArtist" OnSubmit="AddArtist" FormName="addArtist" class="artist-form">
                        <div class="form-group">
                            <label class="form-label">Artist Name</label>
                            <InputText @bind-Value="newArtist!.Name" class="form-input"></InputText>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Genre</label>
                            <InputText @bind-Value="newArtist!.Genre" class="form-input"></InputText>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Image URL</label>
                            <InputText @bind-Value="newArtist!.Image" class="form-input"></InputText>
                        </div>
                        <button type="submit" class="form-button add-button">Add Artist</button>
                    </EditForm>
                </div>

                <!-- Update Artist Form -->
                <div class="form-card update-form">
                    <div class="form-header">
                        <h2 class="form-title">Update Artist</h2>
                        <div class="form-icon update-icon">✏️</div>
                    </div>
                    <EditForm Model="updateArtist" OnSubmit="UpdateArtist" FormName="updateArtist" class="artist-form">
                        <div class="form-group">
                            <label class="form-label">Artist ID</label>
                            <InputNumber @bind-Value="updateArtist!.Id" class="form-input"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Artist Name</label>
                            <InputText @bind-Value="updateArtist!.Name" class="form-input"></InputText>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Genre</label>
                            <InputText @bind-Value="updateArtist!.Genre" class="form-input"></InputText>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Image URL</label>
                            <InputText @bind-Value="updateArtist!.Image" class="form-input"></InputText>
                        </div>
                        <button type="submit" class="form-button update-button">Update Artist</button>
                    </EditForm>
                </div>

                <!-- Delete Artist Form -->
                <div class="form-card delete-form">
                    <div class="form-header">
                        <h2 class="form-title">Delete Artist</h2>
                        <div class="form-icon delete-icon">🗑️</div>
                    </div>
                    <EditForm Model="deleteArtist" OnSubmit="DeleteArtist" FormName="deleteArtist" class="artist-form">
                        <div class="form-group">
                            <label class="form-label">Artist ID</label>
                            <InputNumber @bind-Value="deleteArtist!.Id" class="form-input"></InputNumber>
                        </div>
                        <button type="submit" class="form-button delete-button">Delete Artist</button>
                    </EditForm>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
        </NotAuthorized>
    </AuthorizeView>

    <!-- Filter section-->
    <div class="form-group">
        <label class="form-label">
            Filter by Genre: <span style="font-weight:normal; color: #3498db;">@SelectedGenre</span>
        </label>
        <select @bind="SelectedGenre" @bind:event="onchange" TValue="string" class="form-control">
            <option value="">All Genres</option>
            @foreach (var genre in availableGenres)
            {
                <option value="@genre">@genre</option>
            }
        </select>
    </div>

    <!-- Search section -->
    <div class="form-group">
        <label class="form-label">Search Artists:</label>
        <input type="text" @bind="searchTerm" class="form-control" placeholder="Type artist name..." />
    </div>

    <!-- Artists Display Section -->
    <div class="artists-display-section">
        <div class="section-header">
            <h2 class="section-title">Artists Collection</h2>
            <div class="artists-count">
                Showing: @GetFilteredArtists().Count() / Total: @artists.Count
            </div>
        </div>

        @if (artists.Count == 0)
        {
            <div class="empty-state">
                <div class="empty-icon">🎨</div>
                <h3 class="empty-title">No Artists Yet</h3>
                <p class="empty-message">Start building your collection by adding your first artist above!</p>
            </div>
        }
        else
        {
            <div class="artists-grid">
                @foreach (var artist in GetFilteredArtists())
                {
                    <div class="artist-card">
                        <div class="artist-image-container">
                            <img src="@artist.Image" alt="@artist.Name" class="artist-image" />
                        </div>
                        <div class="artist-details">
                            <h3 class="artist-name">@artist.Name</h3>
                            <p class="artist-genre">@artist.Genre</p>
                            <div class="artist-actions">
                                <AuthorizeView Roles="Administrator">
                                    <Authorized>
                                        <button class="btn btn-sm btn-warning" @onclick="() => StartEditArtist(artist)">Edit</button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteArtistById(artist.Id)">Delete</button>
                                    </Authorized>
                                </AuthorizeView>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>
@if (showEditModal && editingArtist != null)
{
    <div class="modal" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Artist</h5>
                    <button type="button" class="btn-close" @onclick="CancelEditArtist"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="editName">Name:</label>
                        <input id="editName" type="text" @bind="editName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="editGenre">Genre:</label>
                        <input id="editGenre" type="text" @bind="editGenre" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="editImage">Image URL:</label>
                        <input id="editImage" type="text" @bind="editImage" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelEditArtist">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveEditArtist">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
}
@code {
    private string? SelectedGenre { get; set; }

    private IList<ArtistGetDto> artists = new List<ArtistGetDto>();

    [SupplyParameterFromForm]
    private ArtistCreateDto? newArtist { get; set; }

    [SupplyParameterFromForm]
    private ArtistUpdateDto? updateArtist { get; set; }

    [SupplyParameterFromForm]
    private ArtistGetDto? deleteArtist { get; set; }

    //asta nu il folosesc pe moment
    private string selectedGenre { get; set; } = string.Empty; // asta este filtrul curent

    private List<string> availableGenres = new(); // o lista unica unde imi salvez genre-urile disponibile

    private string searchTerm { get; set; } = string.Empty; // search term for artist name

    // Edit modal state
    private ArtistGetDto? editingArtist;
    private string editName = string.Empty;
    private string editGenre = string.Empty;
    private string editImage = string.Empty;
    private bool showEditModal = false;

    protected override async Task OnInitializedAsync()
    {
        // pentru primul load neaparat initializare sa nu fie null ca nu ii place la forms
        newArtist ??= new ArtistCreateDto();
        updateArtist ??= new ArtistUpdateDto();
        deleteArtist ??= new ArtistGetDto();

        // Load initial data
        selectedGenre = "Rap";

        artists = await ArtistService.GetAllArtistsAsync();

        availableGenres = artists
            .Select(a => a.Genre)
            .Distinct()
            .OrderBy(g => g)
            .ToList();
    }

    private async Task AddArtist()
    {
        if (newArtist != null)
        {
            await ArtistService.AddArtistAsync(newArtist);
            newArtist = new ArtistCreateDto();
            artists = await ArtistService.GetAllArtistsAsync();
        }
    }

    private async Task DeleteArtist()
    {
        if (deleteArtist != null)
        {
            await ArtistService.DeleteArtistAsync(deleteArtist.Id);
            deleteArtist = new ArtistGetDto();
            artists = await ArtistService.GetAllArtistsAsync();
        }
    }

    private async Task UpdateArtist()
    {
        if (updateArtist != null)
        {
            await ArtistService.UpdateArtistAsync(updateArtist);
            updateArtist = new ArtistUpdateDto();
            artists = await ArtistService.GetAllArtistsAsync();
        }
    }

    private async Task GetArtists()
    {
        artists = await ArtistService.GetAllArtistsAsync();
    }


    private IEnumerable<ArtistGetDto> GetFilteredArtists()
    {
        Console.WriteLine($"Current filter: {SelectedGenre ?? "None"}");
        Console.WriteLine($"All genres: {string.Join(", ", availableGenres)}");
        Console.WriteLine($"[DEBUG] Selected genre: '{SelectedGenre}'");
        Console.WriteLine($"[DEBUG] Search term: '{searchTerm}'");

        IEnumerable<ArtistGetDto> filtered = artists;

        if (!string.IsNullOrEmpty(SelectedGenre))
        {
            filtered = filtered.Where(a => string.Equals(a.Genre, SelectedGenre, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(a => a.Name != null && a.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        Console.WriteLine($"Found {filtered.Count()} artists for genre '{SelectedGenre}' and search '{searchTerm}'");
        return filtered;
    }



    private void ShowGenre()
    {
        // This will show a browser alert with the current value
        // For Blazor Server, you can use JS interop, but for a quick test, just update the debug line or use Console.WriteLine
        Console.WriteLine($"Selected genre is: {SelectedGenre}");

    }

    private void StartEditArtist(ArtistGetDto artist)
    {
        editingArtist = artist;
        editName = artist.Name;
        editGenre = artist.Genre;
        editImage = artist.Image;
        showEditModal = true;
    }

    private void CancelEditArtist()
    {
        editingArtist = null;
        editName = string.Empty;
        editGenre = string.Empty;
        editImage = string.Empty;
        showEditModal = false;
    }

    private async Task SaveEditArtist()
    {
        if (editingArtist != null)
        {
            var updateDto = new ArtistUpdateDto
            {
                Id = editingArtist.Id,
                Name = editName,
                Genre = editGenre,
                Image = editImage
            };
            await ArtistService.UpdateArtistAsync(updateDto);
            await GetArtists();
            CancelEditArtist();
        }
    }

    private async Task DeleteArtistById(int artistId)
    {
        await ArtistService.DeleteArtistAsync(artistId);
        await GetArtists();
    }


    private RenderFragment ShowChoose(string? value) => (__builder) =>
    {
        if (value is null || value == "")
        {
            <option value="" disabled selected>Choose...</option>
        }
    };




}