@page "/artists"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.BussinessLogic.Dtos
@using Microsoft.AspNetCore.Components.Forms
@inject IArtistsService ArtistService


@* newArtist!.Name ==> Null forgiving operator nu ma omoara daca e null *@
<div class="artists-container">
    <div class="page-header">
        <h1 class="page-title">Artist Management</h1>
        <p class="page-subtitle">Manage your artists collection</p>
    </div>

    <div class="forms-section">
        <!-- Add Artist Form -->
        <div class="form-card add-form">
            <div class="form-header">
                <h2 class="form-title">Add New Artist</h2>
                <div class="form-icon add-icon">+</div>
            </div>
            <EditForm Model="newArtist" OnSubmit="AddArtist" FormName="addArtist" class="artist-form">
                <div class="form-group">
                    <label class="form-label">Artist Name</label>
                    <InputText @bind-Value="newArtist!.Name" class="form-input"></InputText>
                </div>
                <div class="form-group">
                    <label class="form-label">Genre</label>
                    <InputText @bind-Value="newArtist!.Genre" class="form-input"></InputText>
                </div>
                <div class="form-group">
                    <label class="form-label">Image URL</label>
                    <InputText @bind-Value="newArtist!.Image" class="form-input"></InputText>
                </div>
                <button type="submit" class="form-button add-button">Add Artist</button>
            </EditForm>
        </div>

        <!-- Update Artist Form -->
        <div class="form-card update-form">
            <div class="form-header">
                <h2 class="form-title">Update Artist</h2>
                <div class="form-icon update-icon">✏️</div>
            </div>
            <EditForm Model="updateArtist" OnSubmit="UpdateArtist" FormName="updateArtist" class="artist-form">
                <div class="form-group">
                    <label class="form-label">Artist ID</label>
                    <InputNumber @bind-Value="updateArtist!.Id" class="form-input"></InputNumber>
                </div>
                <div class="form-group">
                    <label class="form-label">Artist Name</label>
                    <InputText @bind-Value="updateArtist!.Name" class="form-input"></InputText>
                </div>
                <div class="form-group">
                    <label class="form-label">Genre</label>
                    <InputText @bind-Value="updateArtist!.Genre" class="form-input"></InputText>
                </div>
                <div class="form-group">
                    <label class="form-label">Image URL</label>
                    <InputText @bind-Value="updateArtist!.Image" class="form-input"></InputText>
                </div>
                <button type="submit" class="form-button update-button">Update Artist</button>
            </EditForm>
        </div>

        <!-- Delete Artist Form -->
        <div class="form-card delete-form">
            <div class="form-header">
                <h2 class="form-title">Delete Artist</h2>
                <div class="form-icon delete-icon">🗑️</div>
            </div>
            <EditForm Model="deleteArtist" OnSubmit="DeleteArtist" FormName="deleteArtist" class="artist-form">
                <div class="form-group">
                    <label class="form-label">Artist ID</label>
                    <InputNumber @bind-Value="deleteArtist!.Id" class="form-input"></InputNumber>
                </div>
                <button type="submit" class="form-button delete-button">Delete Artist</button>
            </EditForm>
        </div>
    </div>

    <!-- Artists Display Section -->
    <div class="artists-display-section">
        <div class="section-header">
            <h2 class="section-title">Artists Collection</h2>
            <div class="artists-count">Total: @artists.Count</div>
        </div>

        @if (artists.Count == 0)
        {
            <div class="empty-state">
                <div class="empty-icon">🎨</div>
                <h3 class="empty-title">No Artists Yet</h3>
                <p class="empty-message">Start building your collection by adding your first artist above!</p>
            </div>
        }
        else
        {
            <div class="artists-grid">
                @foreach (var artist in artists)
                {
                    <div class="artist-card">
                        <div class="artist-image-container">
                            <img src="@artist.Image" alt="@artist.Name" class="artist-image" />
                            <div class="artist-overlay">
                                <span class="artist-id">ID: @artist.Id</span>
                            </div>
                        </div>
                        <div class="artist-details">
                            <h3 class="artist-name">@artist.Name</h3>
                            <p class="artist-genre">@artist.Genre</p>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>
@code {
    private IList<ArtistGetDto> artists = new List<ArtistGetDto>();

    [SupplyParameterFromForm]
    private ArtistCreateDto? newArtist { get; set; }

    [SupplyParameterFromForm]
    private ArtistUpdateDto? updateArtist { get; set; }

    [SupplyParameterFromForm]
    private ArtistGetDto? deleteArtist { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // pentru primul load neaparat initializare sa nu fie null ca nu ii place la forms
        newArtist ??= new ArtistCreateDto();
        updateArtist ??= new ArtistUpdateDto();
        deleteArtist ??= new ArtistGetDto();

        artists = await ArtistService.GetAllArtistsAsync();
    }

    private async Task AddArtist()
    {
        if (newArtist != null)
        {
            await ArtistService.AddArtistAsync(newArtist);
            newArtist = new ArtistCreateDto();
            artists = await ArtistService.GetAllArtistsAsync();
        }
    }

    private async Task DeleteArtist()
    {
        if (deleteArtist != null)
        {
            await ArtistService.DeleteArtistAsync(deleteArtist.Id);
            deleteArtist = new ArtistGetDto();
            artists = await ArtistService.GetAllArtistsAsync();
        }
    }

    private async Task UpdateArtist()
    {
        if (updateArtist != null)
        {
            await ArtistService.UpdateArtistAsync(updateArtist);
            updateArtist = new ArtistUpdateDto();
            artists = await ArtistService.GetAllArtistsAsync();
        }
    }

    private async Task GetArtists()
    {
        artists = await ArtistService.GetAllArtistsAsync();
    }


	//   still have to integrate this method with the UI
    //   and ofc test it, I have no clue if it works
    private async Task GetArtistByGenre()
    {
        var artistListByGenre = await ArtistService.GetAllArtistsAsync();
		artists = artistListByGenre.Where(a => a.Genre == newArtist?.Genre).ToList();
		if (artists.Count == 0)
		{
			Console.WriteLine($"No artists found for genre: {newArtist?.Genre}");
		}
		else
		{
			Console.WriteLine($"Found {artists.Count} artists for genre: {newArtist?.Genre}");  
		}
        artists = await ArtistService.GetAllArtistsAsync();
    }

}