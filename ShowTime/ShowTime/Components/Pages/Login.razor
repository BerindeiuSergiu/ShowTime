@page "/login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@inject IUserService UserService
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using ShowTime.DataAccess.Models

<div class="forms-section">
    <!-- Add Artist Form -->
    <div class="form-card add-form">
        <div class="form-header">
            <h2 class="form-title">LOGIN</h2>
            <div class="form-icon add-icon">+</div>
        </div>
        <EditForm Model="loginInfo" OnSubmit="Authenthicate" FormName="loginForm" class="artist-form">
            <div class="form-group">
                <label class="form-label">Email</label>
                <InputText @bind-Value="loginInfo!.Email" class="form-input"></InputText>
                <ValidationMessage For = "() => loginInfo.Email"> </ValidationMessage>
            </div>
            <div class="form-group">
                <label class="form-label">Password</label>
                <InputText @bind-Value="loginInfo!.Password" class="form-input"></InputText>
                <ValidationMessage For="() => loginInfo.Password"> </ValidationMessage>
            </div>
            <button type="submit" class="form-button add-button">Login</button>
        </EditForm>
    </div>
</div>


@code {

    [SupplyParameterFromForm]
    private LoginDto loginInfo { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = null!;

    private async Task Authenthicate()
    {
        try{
            var response = await UserService.LoginAsync(loginInfo);


            var claims = new List<Claim>
				{
					new Claim(ClaimTypes.Email, loginInfo.Email),
                    new Claim(ClaimTypes.Role, Enum.GetName(typeof(Role), response.Role) ?? nameof(Role.User))
				};

            var claimIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var claimsPrincipal = new ClaimsPrincipal(claimIdentity);


            await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, claimsPrincipal);

			Navigation.NavigateTo("/");

        }catch(Exception e)
        {
				Console.WriteLine(e.Message);
        }
    }
}
