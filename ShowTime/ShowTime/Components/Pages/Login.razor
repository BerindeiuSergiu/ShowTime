@page "/login"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@inject IUserService UserService
@inject NavigationManager Navigation
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations

<div class="login-container">
    <div class="login-card">
        <h2 class="login-title">Sign In</h2>
        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" />
            </div>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">@errorMessage</div>
            }
            <button type="submit" class="login-button">Login</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null;
        var user = await UserService.LoginAsync(loginModel.Email, loginModel.Password);
        if (user != null)
        {
            // TODO: Set authentication state, redirect, etc.
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid email or password.";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;
    }
}
