@page "/festivals"
@using ShowTime.BusinessLogic.Abstractions
@using ShowTime.BusinessLogic.Dtos
@using ShowTime.BussinessLogic.Dtos
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization
@inject IFestivalService FestivalService
@inject ILineupService LineupService
@inject IArtistsService ArtistService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer


<div class="festivals-container">

    <div class="page-header">
        <h1 class="page-title">Festival Management</h1>
        <p class="page-subtitle">Manage your festivals here</p>
    </div>

    <AuthorizeView Roles="Administrator">
        <Authorized Context="authContext">
            <div class="forms-section">

                <!-- Add Festival Form -->
                <div class="form-card">
                    <div class="form-header">
                        <h2 class="form-title">Add New Festival</h2>
                        <div class="form-icon add-icon">+</div>
                    </div>

                    <EditForm Model="newFestival" OnSubmit="AddFestival" FormName="AddFestivalForm" class="artist-form">
                        <label class="form-label">Festival Name</label>
                        <InputText @bind-Value="newFestival.Name" class="form-control" />

                        <label class="form-label">Location</label>
                        <InputText @bind-Value="newFestival.Location" class="form-control" />

                        <label class="form-label">Start Date</label>
                        <InputDate @bind-Value="newFestival.StartDate" class="form-control" />

                        <label class="form-label">End Date</label>
                        <InputDate @bind-Value="newFestival.EndDate" class="form-control" />

                        <label class="form-label">Splash Art (Image URL)</label>
                        <InputText @bind-Value="newFestival.SplashArt" class="form-control" />

                        <label class="form-label">Capacity</label>
                        <InputNumber @bind-Value="newFestival.Capacity" class="form-control" />

                        <button type="submit" class="btn-primary form-button">Add Festival</button>
                    </EditForm>
                </div>

                <!-- Update Festival Form -->
                <div class="form-card">
                    <div class="form-header">
                        <h2 class="form-title">Update Festival</h2>
                        <div class="form-icon update-icon">✎</div>
                    </div>

                    <EditForm Model="updateFestival" OnSubmit="UpdateFestival" FormName="UpdateFestivalForm" class="artist-form">
                        <label class="form-label">Festival ID</label>
                        <InputNumber @bind-Value="updateFestival!.Id" class="form-control" />

                        <label class="form-label">Festival Name</label>
                        <InputText @bind-Value="updateFestival!.Name" class="form-control" />

                        <label class="form-label">Location</label>
                        <InputText @bind-Value="updateFestival!.Location" class="form-control" />

                        <label class="form-label">Start Date</label>
                        <InputDate @bind-Value="updateFestival!.StartDate" class="form-control" />

                        <label class="form-label">End Date</label>
                        <InputDate @bind-Value="updateFestival!.EndDate" class="form-control" />

                        <label class="form-label">Splash Art (Image URL)</label>
                        <InputText @bind-Value="updateFestival!.SplashArt" class="form-control" />

                        <label class="form-label">Capacity</label>
                        <InputNumber @bind-Value="updateFestival!.Capacity" class="form-control" />

                        <button type="submit" class="btn-primary form-button">Update Festival</button>
                    </EditForm>
                </div>

                <!-- Delete Festival Form -->
                <div class="form-card">
                    <div class="form-header">
                        <h2 class="form-title">Delete Festival</h2>
                        <div class="form-icon delete-icon">×</div>
                    </div>

                    <EditForm Model="deleteFestival" OnSubmit="DeleteFestival" FormName="DeleteFestivalForm" class="artist-form">
                        <label class="form-label">Festival ID</label>
                        <InputNumber @bind-Value="deleteFestival!.Id" class="form-control" />

                        <button type="submit" class="btn-danger form-button">Delete Festival</button>
                    </EditForm>
                </div>

            </div> <!-- end forms-section -->
        </Authorized>
        <NotAuthorized>
            @* <div class="admin-notice"> *@
            @*     <div class="notice-icon">🔒</div> *@
            @*     <h3 style="color: #2c3e50;">Admin Access Required</h3> *@
            @*     <p style="color: #3498db;">You need administrator privileges to add, update, or delete festivals.</p> *@
            @* </div> *@
        </NotAuthorized>
    </AuthorizeView>

    <!-- Festivals List Section -->
    <h2 class="section-title">Festivals</h2>

    @if (festivals.Count == 0)
    {
        <div class="empty-state">
            <div class="empty-icon">🎉</div>
            <p class="empty-title">No festivals registered</p>
            <p class="empty-message">Start by adding a new festival using the form above.</p>
        </div>
    }
    else
    {
        <div class="festival-list">
            @foreach (var festival in festivals)
            {
                <div class="festival-card">
                    @if (!string.IsNullOrEmpty(festival.SplashArt))
                    {
                        <img src="@festival.SplashArt" alt="@festival.Name" class="festival-image" />
                    }
                    <div class="festival-info">
                        <h3 class="card-title">@festival.Name</h3>
                        <p class="card-text"><strong>Location:</strong> @festival.Location</p>
                        <p class="card-text"><strong>Start Date:</strong> @festival.StartDate.ToString("MMM dd, yyyy")</p>
                        <p class="card-text"><strong>End Date:</strong> @festival.EndDate.ToString("MMM dd, yyyy")</p>
                        @if (festival.Capacity > 0)
                        {
                            <p class="card-text"><strong>Capacity:</strong> @festival.Capacity.ToString("N0")</p>
                        }
                        @* <p class="card-text"><small class="text-muted">Festival ID: @festival.Id</small></p> *@
                        
                        <div class="festival-actions">
                            <button class="btn-secondary" @onclick="() => ToggleLineup(festival.Id)">
                                @if (visibleLineups.Contains(festival.Id))
                                {
                                    <span>Hide Lineup</span>
                                }
                                else
                                {
                                    <span>View Lineup</span>
                                }
                            </button>
                            <AuthorizeView Roles="Administrator">
                                <Authorized>
                                    <button class="btn btn-sm btn-warning" @onclick="() => StartEditFestival(festival)">Edit</button>
                                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteFestivalById(festival.Id)">Delete</button>
                                </Authorized>
                            </AuthorizeView>
                        </div>

                        @if (visibleLineups.Contains(festival.Id))
                        {
                            <div class="lineup-section">
                                <h4>Lineup</h4>
                                @if (festivalLineups.ContainsKey(festival.Id) && festivalLineups[festival.Id].Any())
                                {
                                    <ul class="lineup-list">
                                        @foreach (var lineup in festivalLineups[festival.Id])
                                        {
                                            var artist = artists.FirstOrDefault(a => a.Id == lineup.ArtistId);
                                            <li class="lineup-item">
                                                @if (artist != null)
                                                {
                                                    <span class="artist-name">@artist.Name</span>
                                                    <span class="artist-genre">(@artist.Genre)</span>
                                                }
                                                else
                                                {
                                                    <span class="artist-name">Artist ID @lineup.ArtistId</span>
                                                }
                                            </li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p class="no-lineup">No artists in lineup yet.</p>
                                }
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }
</div>

@if (showEditModal && editingFestival != null)
{
    <div class="modal" style="display: block; background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit Festival</h5>
                    <button type="button" class="btn-close" @onclick="CancelEditFestival"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="editName">Name:</label>
                        <input id="editName" type="text" @bind="editName" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="editLocation">Location:</label>
                        <input id="editLocation" type="text" @bind="editLocation" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="editStartDate">Start Date:</label>
                        <InputDate id="editStartDate" @bind-Value="editStartDate" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="editEndDate">End Date:</label>
                        <InputDate id="editEndDate" @bind-Value="editEndDate" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="editSplashArt">Splash Art (Image URL):</label>
                        <input id="editSplashArt" type="text" @bind="editSplashArt" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label for="editCapacity">Capacity:</label>
                        <InputNumber id="editCapacity" @bind-Value="editCapacity" class="form-control" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelEditFestival">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="SaveEditFestival">Save Changes</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private IList<FestivalGetDto> festivals = new List<FestivalGetDto>();
    private IList<ArtistGetDto> artists = new List<ArtistGetDto>();
    private Dictionary<int, List<LineupGetDto>> festivalLineups = new();
    private HashSet<int> visibleLineups = new();

    // Edit modal state
    private FestivalGetDto? editingFestival;
    private string editName = string.Empty;
    private string editLocation = string.Empty;
    private DateTime editStartDate;
    private DateTime editEndDate;
    private string editSplashArt = string.Empty;
    private int editCapacity;
    private bool showEditModal = false;

    [SupplyParameterFromForm]
    private FestivalCreateDto newFestival { get; set; } = new();

    [SupplyParameterFromForm]
    private FestivalUpdateDto updateFestival { get; set; } = new();

    [SupplyParameterFromForm]
    private FestivalGetDto deleteFestival { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        newFestival ??= new FestivalCreateDto();
        updateFestival ??= new FestivalUpdateDto();
        deleteFestival ??= new FestivalGetDto();

        festivals = await FestivalService.GetAllFestivalsAsync();
        artists = await ArtistService.GetAllArtistsAsync();
    }

    private async Task ToggleLineup(int festivalId)
    {
        if (visibleLineups.Contains(festivalId))
        {
            visibleLineups.Remove(festivalId);
        }
        else
        {
            visibleLineups.Add(festivalId);
            
            // Load lineup if not already loaded
            if (!festivalLineups.ContainsKey(festivalId))
            {
                var lineup = await LineupService.GetLineupsByFestivalAsync(festivalId);
                festivalLineups[festivalId] = lineup.ToList();
            }
        }
        
        StateHasChanged();
    }

    private void StartEditFestival(FestivalGetDto festival)
    {
        editingFestival = festival;
        editName = festival.Name;
        editLocation = festival.Location;
        editStartDate = festival.StartDate;
        editEndDate = festival.EndDate;
        editSplashArt = festival.SplashArt;
        editCapacity = festival.Capacity;
        showEditModal = true;
    }

    private void CancelEditFestival()
    {
        editingFestival = null;
        editName = string.Empty;
        editLocation = string.Empty;
        editStartDate = DateTime.Now;
        editEndDate = DateTime.Now;
        editSplashArt = string.Empty;
        editCapacity = 0;
        showEditModal = false;
    }

    private async Task SaveEditFestival()
    {
        if (editingFestival != null)
        {
            var updateDto = new FestivalUpdateDto
            {
                Id = editingFestival.Id,
                Name = editName,
                Location = editLocation,
                StartDate = editStartDate,
                EndDate = editEndDate,
                SplashArt = editSplashArt,
                Capacity = editCapacity
            };
            await FestivalService.UpdateFestivalAsync(updateDto);
            festivals = await FestivalService.GetAllFestivalsAsync();
            CancelEditFestival();
        }
    }

    private async Task DeleteFestivalById(int festivalId)
    {
        await FestivalService.DeleteFestivalAsync(festivalId);
        festivals = await FestivalService.GetAllFestivalsAsync();
        if (festivalLineups.ContainsKey(festivalId))
        {
            festivalLineups.Remove(festivalId);
        }
        visibleLineups.Remove(festivalId);
    }

    private async Task AddFestival()
    {
        await FestivalService.AddFestivalAsync(newFestival);
        newFestival = new FestivalCreateDto();
        festivals = await FestivalService.GetAllFestivalsAsync();
    }

    private async Task DeleteFestival()
    {
        if (deleteFestival != null)
        {
            await FestivalService.DeleteFestivalAsync(deleteFestival.Id);
            deleteFestival = new FestivalGetDto();
            festivals = await FestivalService.GetAllFestivalsAsync();
            
            // Clean up lineup data for deleted festival
            if (festivalLineups.ContainsKey(deleteFestival.Id))
            {
                festivalLineups.Remove(deleteFestival.Id);
            }
            visibleLineups.Remove(deleteFestival.Id);
        }
    }

    private async Task UpdateFestival()
    {
        if (updateFestival != null)
        {
            await FestivalService.UpdateFestivalAsync(updateFestival);
            updateFestival = new FestivalUpdateDto();
            festivals = await FestivalService.GetAllFestivalsAsync();
        }
    }
}